{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Tony Stark\\\\Desktop\\\\Tutorial Project\\\\covid-19-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Tony Stark\\\\Desktop\\\\Tutorial Project\\\\covid-19-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Tony Stark\\\\Desktop\\\\Tutorial Project\\\\covid-19-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"C:\\\\Users\\\\Tony Stark\\\\Desktop\\\\Tutorial Project\\\\covid-19-tracker\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useState,useEffect}from'react';import{Line}from\"react-chartjs-2\";import numeral from\"numeral\";var options={legend:{display:false},elements:{point:{radius:0}},maintainAspectRatio:false,tooltips:{mode:\"index\",intersect:false,callbacks:{label:function label(tooltipItem,data){return numeral(tooltipItem.value).format(\"+0,0\");}}},scales:{xAxes:[{type:\"time\",time:{format:\"MM/DD/YY\",tooltipFormat:\"ll\"}}],yAxes:[{gridLines:{display:false},ticks:{//Include a dollar sign in the ticks\ncallback:function callback(value,index,values){return numeral(value).format(\"0a\");}}}]}};var buildChartData=function buildChartData(data){var casesType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'cases';var chartData=[];var lastDataPoint;for(var date in data.cases){if(lastDataPoint){var newDataPoint={x:date,y:data[casesType][date]-lastDataPoint};chartData.push(newDataPoint);}lastDataPoint=data[casesType][date];}return chartData;};function LineGraph(_ref){var _ref$casesType=_ref.casesType,casesType=_ref$casesType===void 0?\"cases\":_ref$casesType,props=_objectWithoutProperties(_ref,[\"casesType\"]);var _useState=useState({}),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];// https://disease.sh/v3/covid-19/historical/all?lastdays=120\nuseEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(function(response){return response.json();}).then(function(data){var chartData=buildChartData(data,casesType);setData(chartData);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function fetchData(){return _ref2.apply(this,arguments);};}();fetchData();},[casesType]);return/*#__PURE__*/React.createElement(\"div\",{className:props.className},(data===null||data===void 0?void 0:data.length)>0&&/*#__PURE__*/React.createElement(Line,{options:options,data:{datasets:[{backgroundColor:\"rgba(204, 16, 52, 0.5)\",borderColor:\"#CC1034\",data:data}]}}));}export default LineGraph;","map":{"version":3,"sources":["C:/Users/Tony Stark/Desktop/Tutorial Project/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","props","setData","fetchData","fetch","then","response","json","className","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    }, \r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    //Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\n\r\nfunction LineGraph( { casesType = \"cases\", ...props }) {\r\n    const [data, setData] = useState({});\r\n\r\n    // https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n    useEffect(() => {\r\n        const fetchData = async() => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then(response => {\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            }); \r\n        }\r\n\r\n        fetchData();\r\n\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line \r\n                options = {options}\r\n                data={{\r\n                    datasets: [{\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data,\r\n                    }]\r\n                }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;"]},"metadata":{},"sourceType":"module"}